#!/usr/bin/env groovy

pipeline {
	agent any
	stages {
		stage('Accumulo Tests') {
			steps {
				sh '''
					export db_type="accumulo"
					source ci/createcluster.sh
					code=0
					ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/startup.sh || code=1
					ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/runtests_accumulo.sh
					remoteHOSTNAME=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/getHOSTNAME.sh)
					npm install newman --global
					PATH=$(npm bin):$PATH newman run ci/Postman/collections/Geowave_Happypath.postman_collection.json \
						-e ci/Postman/environments/gw_hbase.postman_environment.json \
						--timeout-request 10000 \
						--global-var "domain=${DOMAIN}" \
						--global-var "hostname=${remoteHOSTNAME}"
					aws emr terminate-clusters --cluster-ids ${CLUSTER_ID} --region ${REGION} || code=1
					exit $code
				'''
			}
			post {
				failure {
					echo "# ! $ ! # This should be sending a slack failure # ! $ ! #"
					// slackSend color: 'danger', message: ':fire: The accumulo acceptance tests have failed :fire:'
				}
				changed {
					script {
						if (currentBuild.currentResult == 'SUCCESS') {
							slackSend color: 'good', message: ':unicorn_face: The accumulo acceptance tests are passing again! :unicorn_face:'
						}
					}
				}
			}
		}
		stage('HBase Tests') {
			steps {
				sh '''
					export db_type="hbase"
					source ci/createcluster.sh
					code=0
					ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/startup.sh
					ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/runtests_hbase.sh || code=1
					remoteHOSTNAME=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/${KEYNAME}.pem hadoop@${DOMAIN} < ci/getHOSTNAME.sh)
					npm install newman --global
					PATH=$(npm bin):$PATH newman run ci/Postman/collections/Geowave_Happypath.postman_collection.json \
						-e ci/Postman/environments/gw_hbase.postman_environment.json \
						--timeout-request 10000 \
						--global-var "domain=${DOMAIN}" \
						--global-var "hostname=${remoteHOSTNAME}" || code=1
					aws emr terminate-clusters --cluster-ids ${CLUSTER_ID} --region ${REGION}
					exit $code
				'''
			}
			post {
				failure {
					echo "# ! $ ! # This should be sending a slack failure # ! $ ! #"
					// slackSend color: 'danger', message: ':fire: The hbase acceptance tests have failed :fire:'
				}
				changed {
					script {
						if (currentBuild.currentResult == 'SUCCESS') {
							slackSend color: 'good', message: ':unicorn_face: The hbase acceptance tests are passing again! :unicorn_face:'
						}
					}
				}
			}
		}
	}
}
