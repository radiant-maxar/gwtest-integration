{
	"info": {
		"name": "Geowave_Happypath",
		"_postman_id": "ba307afc-ee00-1aad-5453-df540fadf5ef",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Startup",
			"description": "",
			"item": [
				{
					"name": "Hello Geowave!",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d29b00ad-e0cb-4d97-b54b-c8e99ce31ab0",
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"testLevels(tests, data, \"swagger\")",
									"",
									"postman.setEnvironmentVariable('base', postman.getGlobalVariable('domain') + \":\" + postman.getEnvironmentVariable('port') + \"/\" + postman.getEnvironmentVariable('version'));",
									"postman.setEnvironmentVariable('geoserver', postman.getGlobalVariable('domain') + \":\" + postman.getEnvironmentVariable('port') + \"/\" + postman.getEnvironmentVariable('gs_path'));",
									"postman.setEnvironmentVariable('retry_loop', 0);",
									"postman.setEnvironmentVariable('max_retries', 120);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}:{{port}}/restservices/api",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"restservices",
								"api"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Config Geoserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c18d3219-f46a-41a8-b0a9-1c8c8f3c9091",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'status', 'string')) {",
									"    tests[\"status is 'COMPLETE'\"] = data.status.match(/complete/i);",
									"}",
									"if (testLevels(tests, data, 'data', 'string')) {",
									"    tests[\"response includes 'geoserver.url'\"] = data.data.match(/geoserver\\.url/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "GeoServer_URL",
									"value": "{{hostname}}:8000",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/geoserver",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"geoserver"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Config List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a43ef25-6af9-459e-a121-6cca5f078ac6",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, ['data','geoserver.url'])) {",
									"    console.log(data.data['geoserver.url'])",
									"    tests[\"Geoserver set to hostname\"] = data.data['geoserver.url'] == postman.getGlobalVariable('hostname') + \":8000\";",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{base}}/config/list",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"list"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Vector - Object Creation",
			"description": "",
			"item": [
				{
					"name": "add gdelt store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt",
									"type": "text",
									"description": ""
								},
								{
									"key": "zookeeper",
									"value": "{{hostname}}:2181",
									"type": "text",
									"description": ""
								},
								{
									"key": "geowaveNamespace",
									"value": "geowave.gdelt",
									"type": "text",
									"description": ""
								},
								{
									"key": "instance",
									"value": "{{instance}}",
									"type": "text",
									"description": ""
								},
								{
									"key": "user",
									"value": "root",
									"type": "text",
									"description": ""
								},
								{
									"key": "password",
									"value": "secret",
									"type": "text",
									"description": ""
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/addstore/{{instance}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"addstore",
								"{{instance}}"
							]
						},
						"description": "good"
					},
					"response": []
				},
				{
					"name": "add gdelt-kde store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt-kde",
									"type": "text",
									"description": ""
								},
								{
									"key": "zookeeper",
									"value": "{{hostname}}:2181",
									"type": "text",
									"description": ""
								},
								{
									"key": "geowaveNamespace",
									"value": "geowave.gdelt",
									"type": "text",
									"description": ""
								},
								{
									"key": "instance",
									"value": "{{instance}}",
									"type": "text",
									"description": ""
								},
								{
									"key": "user",
									"value": "root",
									"type": "text",
									"description": ""
								},
								{
									"key": "password",
									"value": "secret",
									"type": "text",
									"description": ""
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/addstore/{{instance}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"addstore",
								"{{instance}}"
							]
						},
						"description": "good"
					},
					"response": []
				},
				{
					"name": "add spatial index with partitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt-spatial",
									"description": "",
									"type": "text"
								},
								{
									"key": "partitionStrategy",
									"value": "ROUND_ROBIN",
									"description": "",
									"type": "text"
								},
								{
									"key": "numPartitions",
									"value": "32",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/addindex/spatial",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"addindex",
								"spatial"
							]
						},
						"description": "good"
					},
					"response": []
				}
			]
		},
		{
			"name": "Vector - Ingest",
			"description": "",
			"item": [
				{
					"name": "ingest localtogw",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9a182c2-d6fb-45d1-89cd-4ed4d8ab18e0",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'data')) {",
									"    postman.setEnvironmentVariable('ingestId', data.data);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "file_or_directory",
									"value": "/mnt/gdelt",
									"type": "text",
									"description": ""
								},
								{
									"key": "storename",
									"value": "gdelt",
									"description": "",
									"type": "text"
								},
								{
									"key": "index_group_list",
									"value": "gdelt-spatial",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/ingest/localToGW",
							"host": [
								"{{base}}"
							],
							"path": [
								"ingest",
								"localToGW"
							]
						},
						"description": "error with parameters"
					},
					"response": []
				},
				{
					"name": "Check Ingest Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "308eb27c-e37a-4ca0-8318-c0b4d2d1aec6",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'status')) {",
									"    if (data.status == \"RUNNING\") {",
									"        if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest(request.name);",
									"            wait(5000);",
									"        }",
									"        else {",
									"            tests[\"Job should finish in time\"] = false;",
									"        }",
									"    } else {",
									"        tests[\"Ingest should be successful\"] = data.status == \"COMPLETE\";",
									"        console.log(responseBody);  // Print Completed Response, pass or failure.",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{base}}/operation_status?id={{ingestId}}",
							"host": [
								"{{base}}"
							],
							"path": [
								"operation_status"
							],
							"query": [
								{
									"key": "id",
									"value": "{{ingestId}}",
									"equals": true
								}
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "remote liststats",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "parameters",
									"value": "gdelt",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/remote/liststats?store_name=gdelt",
							"host": [
								"{{base}}"
							],
							"path": [
								"remote",
								"liststats"
							],
							"query": [
								{
									"key": "store_name",
									"value": "gdelt",
									"equals": true
								}
							]
						},
						"description": "this is taking a long time (or freezing?)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Geoserver Via Geowave",
			"description": "",
			"item": [
				{
					"name": "Add Layer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "GeoWave_store_name",
									"value": "gdelt",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/addlayer",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"addlayer"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Add KDE Layer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "GeoWave_store_name",
									"value": "gdelt-kde",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/addlayer",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"addlayer"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Feature Layers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "{{base}}/gs/listfl",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"listfl"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Coverage Stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "{{base}}/gs/listcs",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"listcs"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Add Style Subsample",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "stylesld",
									"value": "/mnt/SubsamplePoints.sld",
									"description": "",
									"type": "text"
								},
								{
									"key": "GeoWave_style_name",
									"value": "styleName_sub",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/addstyle",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"addstyle"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Add Style KDE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"tests[\"Status Code should not be 500\"] = responseCode.code != 500;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "stylesld",
									"value": "/mnt/KDEColorMap.sld",
									"description": "",
									"type": "text"
								},
								{
									"key": "GeoWave_style_name",
									"value": "styleName_kde",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/addstyle",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"addstyle"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Styles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {},
						"url": {
							"raw": "{{base}}/gs/liststyles",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"liststyles"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Set LS Subsample",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "styleName",
									"value": "styleName_kde",
									"description": "",
									"type": "text"
								},
								{
									"key": "layer_name",
									"value": "gdeltevent",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/setls",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"setls"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Set LS KDE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "styleName",
									"value": "styleName_kde",
									"description": "",
									"type": "text"
								},
								{
									"key": "layer_name",
									"value": "gdeltevent",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/setls",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"setls"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Feature Layer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "parameters",
									"value": "gdeltevent_kde",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/getfl?layer_name=gdeltevent",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"getfl"
							],
							"query": [
								{
									"key": "layer_name",
									"value": "gdeltevent",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Direct Geoserver",
			"description": "",
			"item": [
				{
					"name": "Hello Geoserver!",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2df8ce3b-be3f-46c5-a56b-3101ded4e3da",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}",
							"host": [
								"{{geoserver}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Geoserver Capabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b940e350-1a92-4ac9-b1fa-bb339b9350ce",
								"type": "text/javascript",
								"exec": [
									"var data = xml2Json(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"foundBBOX = false;",
									"foundGetFeature = false;",
									"foundDescribeFeatureType = false;",
									"",
									"if (testLevels(tests, data, 'wfs:WFS_Capabilities.fes:Filter_Capabilities.fes:Spatial_Capabilities.fes:SpatialOperators.fes:SpatialOperator', 'array')) {",
									"    spatialOps = data['wfs:WFS_Capabilities']['fes:Filter_Capabilities']['fes:Spatial_Capabilities']['fes:SpatialOperators']['fes:SpatialOperator'];",
									"    for (i = 0; i < spatialOps.length; i++) {",
									"        if(testLevels(tests, spatialOps[i], '$.name', 'string')) {",
									"            foundBBOX = foundBBOX || spatialOps[i].$.name.match(/bbox/i);",
									"        }",
									"    }",
									"}",
									"if (testLevels(tests, data, 'wfs:WFS_Capabilities.ows:OperationsMetadata.ows:Operation', 'array')) {",
									"    operations = data['wfs:WFS_Capabilities']['ows:OperationsMetadata']['ows:Operation'];",
									"    for (i = 0; i < operations.length; i++) {",
									"        if(testLevels(tests, operations[i], '$.name', 'string')) {",
									"            foundGetFeature = foundGetFeature || operations[i].$.name.match(/getfeature/i);",
									"            foundDescribeFeatureType = foundDescribeFeatureType || operations[i].$.name.match(/describefeaturetype/i);",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"BBOX Spatial Filter Operation should be present in Capabilities\"] = foundBBOX;",
									"tests[\"GetFeature Operation should be present in Capabilities\"] = foundGetFeature;",
									"tests[\"DescribeFeatureType Operation should be present in Capabilities\"] = foundDescribeFeatureType;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}/geowave/ows?service=WFS&request=GetCapabilities",
							"host": [
								"{{geoserver}}"
							],
							"path": [
								"geowave",
								"ows"
							],
							"query": [
								{
									"key": "service",
									"value": "WFS",
									"equals": true
								},
								{
									"key": "request",
									"value": "GetCapabilities",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query - No Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63845519-3668-4aa3-a12a-09582eb0ec30",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'features', 'array')) {",
									"    if (testLevels(tests, data, 'totalFeatures')) {",
									"        arraySize = Math.min(postman.getEnvironmentVariable('max_features'), data.totalFeatures);",
									"    }",
									"    tests[\"The correct number of features should be returned\"] = data.features.length == arraySize;",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "846d036a-3d08-4143-ae71-6bbbfadb17d7",
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable('max_features', 500);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}/geowave/ows?service=WFS&request=GetFeature&maxFeatures={{max_features}}&version=1.1.0&typeName=geowave:gdeltevent&srsName=EPSG:4326&outputFormat=application/json",
							"host": [
								"{{geoserver}}"
							],
							"path": [
								"geowave",
								"ows"
							],
							"query": [
								{
									"key": "service",
									"value": "WFS",
									"equals": true
								},
								{
									"key": "request",
									"value": "GetFeature",
									"equals": true
								},
								{
									"key": "maxFeatures",
									"value": "{{max_features}}",
									"equals": true
								},
								{
									"key": "version",
									"value": "1.1.0",
									"equals": true
								},
								{
									"key": "typeName",
									"value": "geowave:gdeltevent",
									"equals": true
								},
								{
									"key": "srsName",
									"value": "EPSG:4326",
									"equals": true
								},
								{
									"key": "outputFormat",
									"value": "application/json",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query - Filter Within Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "819383c0-6fe2-41c0-af8c-7132374b27ab",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"latInRange = true;",
									"lonInRange = true;",
									"",
									"if (testLevels(tests, data, 'features', 'array')) {",
									"    if (testLevels(tests, data, 'totalFeatures')) {",
									"        arraySize = Math.min(postman.getEnvironmentVariable('max_features'), data.totalFeatures);",
									"    }",
									"    tests[\"The correct number of features should be returned\"] = data.features.length == arraySize;",
									"    for (i = 0; i < data.features.length; i++) {",
									"        if (testLevels(tests, data.features[i], 'properties.Latitude')) {",
									"            latInRange = latInRange &&",
									"                data.features[i].properties.Latitude >= postman.getEnvironmentVariable('min_lat') &&",
									"                data.features[i].properties.Latitude <= postman.getEnvironmentVariable('max_lat');",
									"        } else {",
									"            break;",
									"        }",
									"        if (testLevels(tests, data.features[i], 'properties.Longitude')) {",
									"            lonInRange = lonInRange &&",
									"                data.features[i].properties.Longitude >= postman.getEnvironmentVariable('min_lon') &&",
									"                data.features[i].properties.Longitude <= postman.getEnvironmentVariable('max_lon');",
									"        } else {",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"All features should be within lat filter\"] = latInRange;",
									"tests[\"All features should be within lon filter\"] = lonInRange;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "808ba99f-20b5-4c3a-8f6a-3e343f0b24a7",
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable('min_lon', 10);",
									"postman.setEnvironmentVariable('max_lon', 11);",
									"postman.setEnvironmentVariable('min_lat', 50);",
									"postman.setEnvironmentVariable('max_lat', 51);",
									"",
									"postman.setEnvironmentVariable('max_features', 500);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}/geowave/ows?service=WFS&request=GetFeature&maxFeatures={{max_features}}&version=1.1.0&typeName=geowave:gdeltevent&CQL_FILTER=BBOX(geometry,{{min_lat}},{{min_lon}},{{max_lat}},{{max_lon}})&srsName=EPSG:4326&outputFormat=application/json",
							"host": [
								"{{geoserver}}"
							],
							"path": [
								"geowave",
								"ows"
							],
							"query": [
								{
									"key": "service",
									"value": "WFS",
									"equals": true
								},
								{
									"key": "request",
									"value": "GetFeature",
									"equals": true
								},
								{
									"key": "maxFeatures",
									"value": "{{max_features}}",
									"equals": true
								},
								{
									"key": "version",
									"value": "1.1.0",
									"equals": true
								},
								{
									"key": "typeName",
									"value": "geowave:gdeltevent",
									"equals": true
								},
								{
									"key": "CQL_FILTER",
									"value": "BBOX(geometry,{{min_lat}},{{min_lon}},{{max_lat}},{{max_lon}})",
									"equals": true
								},
								{
									"key": "srsName",
									"value": "EPSG:4326",
									"equals": true
								},
								{
									"key": "outputFormat",
									"value": "application/json",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query - Filter Intersects Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d5ce4c5-e3a9-4024-a1d2-a4724e1784da",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"latInRange = true;",
									"lonInRange = true;",
									"",
									"if (testLevels(tests, data, 'features', 'array')) {",
									"    if (testLevels(tests, data, 'totalFeatures')) {",
									"        arraySize = Math.min(postman.getEnvironmentVariable('max_features'), data.totalFeatures);",
									"    }",
									"    tests[\"The correct number of features should be returned\"] = data.features.length == arraySize;",
									"    for (i = 0; i < data.features.length; i++) {",
									"        if (testLevels(tests, data.features[i], 'properties.Latitude')) {",
									"            latInRange = latInRange &&",
									"                data.features[i].properties.Latitude >= postman.getEnvironmentVariable('min_lat') &&",
									"                data.features[i].properties.Latitude <= postman.getEnvironmentVariable('max_lat');",
									"        } else {",
									"            break;",
									"        }",
									"        if (testLevels(tests, data.features[i], 'properties.Longitude')) {",
									"            lonInRange = lonInRange &&",
									"                data.features[i].properties.Longitude >= postman.getEnvironmentVariable('min_lon') &&",
									"                data.features[i].properties.Longitude <= postman.getEnvironmentVariable('max_lon');",
									"        } else {",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"All features should be within lat filter\"] = latInRange;",
									"tests[\"All features should be within lon filter\"] = lonInRange;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3a2fa40-53fc-4066-b5a7-d4cb08fb5926",
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable('min_lon', 1);",
									"postman.setEnvironmentVariable('max_lon', 10);",
									"postman.setEnvironmentVariable('min_lat', 1);",
									"postman.setEnvironmentVariable('max_lat', 90);",
									"",
									"postman.setEnvironmentVariable('max_features', 500);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}/geowave/ows?service=WFS&request=GetFeature&maxFeatures={{max_features}}&version=1.1.0&typeName=geowave:gdeltevent&CQL_FILTER=BBOX(geometry,{{min_lat}},{{min_lon}},{{max_lat}},{{max_lon}})&srsName=EPSG:4326&outputFormat=application/json",
							"host": [
								"{{geoserver}}"
							],
							"path": [
								"geowave",
								"ows"
							],
							"query": [
								{
									"key": "service",
									"value": "WFS",
									"equals": true
								},
								{
									"key": "request",
									"value": "GetFeature",
									"equals": true
								},
								{
									"key": "maxFeatures",
									"value": "{{max_features}}",
									"equals": true
								},
								{
									"key": "version",
									"value": "1.1.0",
									"equals": true
								},
								{
									"key": "typeName",
									"value": "geowave:gdeltevent",
									"equals": true
								},
								{
									"key": "CQL_FILTER",
									"value": "BBOX(geometry,{{min_lat}},{{min_lon}},{{max_lat}},{{max_lon}})",
									"equals": true
								},
								{
									"key": "srsName",
									"value": "EPSG:4326",
									"equals": true
								},
								{
									"key": "outputFormat",
									"value": "application/json",
									"equals": true
								}
							]
						},
						"description": "This filter should cover area that both contains and does not contain data.\n\nThere is currently no filter on ingest, so no filter can be used in this request that does not contain data."
					},
					"response": []
				},
				{
					"name": "Describe Feature Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f008b43a-07c4-4d4c-87dc-e8a9440218cb",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be 200\"] = responseCode.code === 200;",
									"",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"",
									"data = parseJSON(tests, responseBody);",
									"",
									"foundGdelt = false;",
									"",
									"if (testLevels(tests, data, 'featureTypes', 'array')) {",
									"    for (i = 0; i < data.featureTypes.length; i++) {",
									"        if (testLevels(tests, data.featureTypes[i], 'typeName')) {",
									"            foundGdelt = foundGdelt || data.featureTypes[i].typeName == 'gdeltevent';",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"The feature type, gdeltevent, should be found.\"] = foundGdelt;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "846d036a-3d08-4143-ae71-6bbbfadb17d7",
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable('max_features', 500);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{geoserver}}/geowave/ows?service=WFS&request=DescribeFeatureType&version=1.1.0&outputFormat=application/json",
							"host": [
								"{{geoserver}}"
							],
							"path": [
								"geowave",
								"ows"
							],
							"query": [
								{
									"key": "service",
									"value": "WFS",
									"equals": true
								},
								{
									"key": "request",
									"value": "DescribeFeatureType",
									"equals": true
								},
								{
									"key": "version",
									"value": "1.1.0",
									"equals": true
								},
								{
									"key": "outputFormat",
									"value": "application/json",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean up",
			"description": "",
			"item": [
				{
					"name": "Clear Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "store_name",
									"value": "gdelt",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/remote/clear",
							"host": [
								"{{base}}"
							],
							"path": [
								"remote",
								"clear"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Remove Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/rmstore",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"rmstore"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Clear KDE Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "store_name",
									"value": "gdelt_kde",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/remote/clear",
							"host": [
								"{{base}}"
							],
							"path": [
								"remote",
								"clear"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Remove KDE Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt-kde",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/rmstore",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"rmstore"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Remove Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "gdelt-spatial",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/config/rmindex",
							"host": [
								"{{base}}"
							],
							"path": [
								"config",
								"rmindex"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Remove Feature Layer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status Code should be Success\"] = responseCode.code >= 200 && responseCode.code < 300; // change to looking for just 200 once fixed."
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "layer_name",
									"value": "gdeltevent",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}/gs/rmfl",
							"host": [
								"{{base}}"
							],
							"path": [
								"gs",
								"rmfl"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}