{
  "id": "e8c980a0-284e-ac7a-7280-a750451fb03b",
  "name": "Geowave",
  "values": [
    {
      "enabled": true,
      "key": "testLevels",
      "value": "(function(tests, inputObj, levels, typeCheck, testString) {\n\ttypeCheck = typeof typeCheck !== 'undefined' ? typeCheck : 'skip';\n\ttestString = typeof testString !== 'undefined' ? testString : '';\n\n\tif (typeof levels === 'string') {\n\t\tlevels = levels.split('.');\n\t}\n\tif (inputObj !== null && inputObj.hasOwnProperty(levels[0])) {\n\t\tvar nextObj = inputObj[levels[0]];\n\t\tif (levels.length === 1) {\n\t\t\ttestString += levels[0];\n\t\t\ttests[testString + ' should be present in output'] = true;\n\t\t\tvar check = false;\n\t\t\tswitch(typeCheck) {\n\t\t\t\tcase 'skip':\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\ttests[\"The type \" + typeCheck + \" is not supported\"] = false;\n\t\t\t\t\treturn false;\n\t\t\t\tcase 'string':\n\t\t\t\t\tcheck = typeof nextObj === 'string';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tcheck = typeof nextObj === 'boolean';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\tcheck = Array.isArray(nextObj) && nextObj.length > 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tcheck = !isNaN(parseFloat(nextObj)) && isFinite(nextObj);\n\t\t\t}\n\t\t\ttests[levels[0] + ' should be ' + typeCheck] = check;\n\t\t\treturn check;\n\t\t}\n\t\telse {\n\t\t\ttestString += levels[0] + '.';\n\t\t\treturn testLevels(tests, nextObj, levels.slice(1), typeCheck, testString);\n\t\t}\n\t}\n\telse {\n\t\tif (testString === '') {\n\t\t\ttestString = levels[0];\n\t\t}\n\t\telse {\n\t\t\ttests[testString.slice(0, -1) + ' should be present in output'] = true;\n\t\t\ttestString += levels[0];\n\t\t}\n\t\tpassedBeforeString = (tests.hasOwnProperty(testString + ' should be present in output') ? \"\" : \"NOTE: This passed for some cases.\")\n\t\ttests[testString + ' should be present in output' + passedBeforeString] = false;\n\t\treturn false;\n\t}\n})",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "testElements",
      "value": "(function (testLevels, tests, inputArray, levels, typeCheck) {   t = {};   m = true;   for (i = 0; i < inputArray.length; i++) {     m = m && testLevels(t, inputArray[i], levels, typeCheck);   }   tests[levels + \" present and valid in each array element.\"] = m;   return m; })",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "wait",
      "value": "(function(millis) {     var date = new Date();     var curDate = null;     do { curDate = new Date(); }     while(curDate-date < millis); })",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "parseJSON",
      "value": "(function (tests, jsonString){   try {     var o = JSON.parse(jsonString);     if (o && typeof o === \"object\") {       tests[\"Valid JSON returned\"] = true;       return o;     }   }   catch (e) { }   tests[\"Valid JSON returned\"] = false;   console.log(jsonString);   return {}; })",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "version",
      "value": "restservices/v0",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "port",
      "value": "8000",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "instance",
      "value": "accumulo",
      "type": "text"
    },
    {
      "enabled": true,
      "key": "gs_path",
      "value": "geoserver",
      "type": "text"
    }
  ],
  "timestamp": 1513799910017,
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2017-12-20T19:58:32.490Z",
  "_postman_exported_using": "Postman/5.4.1"
}